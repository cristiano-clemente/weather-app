{"version":3,"sources":["SearchBar.js","InfoDisplay.js","FullWeatherCard.js","WeatherCard.js","WeatherDisplay.js","App.js","index.js"],"names":["SearchBar","props","useState","input","setInput","useQuery","axios","get","then","data","isLoading","isError","error","Autocomplete","id","fullWidth","options","getOptionLabel","option","title","renderInput","params","TextField","label","variant","onChange","event","value","target","useStyles","makeStyles","fontSize","pos","marginBottom","InfoDisplay","classes","Grid","item","xs","size","className","Typography","component","align","icon","height","marginTop","margin","temp","paddingRight","FullWeatherCard","selectedData","imageLink","weather_state_abbr","Card","CardContent","container","Moment","applicable_date","format","justify","alignItems","the_temp","toFixed","direction","max_temp","min_temp","src","alt","weather_state_name","wind_speed","wind_direction","wind_direction_compass","air_pressure","humidity","WeatherCard","style","cursor","onClick","setSelectedData","WeatherDisplay","consolidated_weather","weatherdata","slice","map","spacing","App","setLocation","Paper","queryClient","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.b5206590.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport axios from \"axios\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport top100Films from \"./markers.js\";\r\n\r\nfunction SearchBar(props) {\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const { data, isLoading, isError, error } = useQuery(\r\n    [\"getLocationInfo\", input],\r\n    () => {\r\n      if (input) {\r\n        return axios\r\n          .get(\r\n            `http://localhost:8010/proxy/api/location/search/?query=${input}`\r\n          )\r\n          .then(({ data } = {}) => data);\r\n      } else return [];\r\n    }\r\n  );\r\n\r\n  return (\r\n    <Autocomplete\r\n      id=\"combo-box-demo\"\r\n      fullWidth\r\n      options={!isLoading ? data : []}\r\n      getOptionLabel={option => option.title}\r\n      renderInput={params => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Select a Location\"\r\n          variant=\"outlined\"\r\n          onChange={(event, value) => setInput(event.target.value)}\r\n        />\r\n      )}\r\n      onChange={(event, value) => props.onChange(value)}\r\n    />\r\n  );\r\n}\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    fontSize: 16\r\n  },\r\n  value: {\r\n    fontSize: 20\r\n  },\r\n  pos: {\r\n    marginBottom: 20\r\n  }\r\n});\r\n\r\nfunction InfoDisplay(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid item xs={props.size} className={classes.pos}>\r\n      <Typography className={classes.title} component=\"p\" align=\"center\">\r\n        {props.title}\r\n      </Typography>\r\n      <Typography className={classes.value} component=\"p\" align=\"center\">\r\n        {props.value}\r\n      </Typography>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default InfoDisplay;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InfoDisplay from \"./InfoDisplay.js\";\r\nimport Moment from \"moment\";\r\n\r\nconst useStyles = makeStyles({\r\n  icon: {\r\n    height: 200,\r\n    marginBottom: 40,\r\n    marginTop: 20\r\n  },\r\n  title: {\r\n    margin: 20\r\n  },\r\n  temp: {\r\n    paddingRight: 30\r\n  }\r\n});\r\n\r\nfunction FullWeatherCard({ selectedData }) {\r\n  const classes = useStyles();\r\n\r\n  const imageLink =\r\n    \"https://www.metaweather.com/static/img/weather/png/\" +\r\n    selectedData.weather_state_abbr +\r\n    \".png\";\r\n\r\n  return (\r\n    <Card className=\"root\">\r\n      <CardContent>\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <Typography\r\n              variant=\"h3\"\r\n              component=\"h3\"\r\n              align=\"center\"\r\n              className={classes.title}\r\n            >\r\n              {Moment(selectedData.applicable_date).format(\"DD MMMM YYYY\")}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            item\r\n            justify=\"flex-end\"\r\n            alignItems=\"center\"\r\n            className={classes.temp}\r\n            xs={4}\r\n          >\r\n            <Typography variant=\"h2\" component=\"h3\" align=\"right\">\r\n              {selectedData.the_temp.toFixed(2)} ºC\r\n            </Typography>\r\n          </Grid>\r\n          <Grid\r\n            xs={3}\r\n            item\r\n            container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"flex-start\"\r\n          >\r\n            <Typography variant=\"h5\" component=\"p\">\r\n              Max: {selectedData.max_temp.toFixed(2)} ºC\r\n            </Typography>\r\n            <Typography variant=\"h5\" component=\"p\">\r\n              Min: {selectedData.min_temp.toFixed(2)} ºC\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <img\r\n              className={classes.icon}\r\n              src={imageLink}\r\n              alt={selectedData.weather_state_name}\r\n            />\r\n          </Grid>\r\n          <InfoDisplay\r\n            title=\"Wind speed\"\r\n            value={selectedData.wind_speed.toFixed(2)}\r\n            size={4}\r\n          ></InfoDisplay>\r\n          <InfoDisplay\r\n            title=\"Wind direction\"\r\n            value={selectedData.wind_direction.toFixed(2)}\r\n            size={4}\r\n          ></InfoDisplay>\r\n          <InfoDisplay\r\n            title=\"Wind direction compass\"\r\n            value={selectedData.wind_direction_compass}\r\n            size={4}\r\n          ></InfoDisplay>\r\n          <InfoDisplay\r\n            title=\"Air pressure\"\r\n            value={selectedData.air_pressure.toFixed(2)}\r\n            size={4}\r\n          ></InfoDisplay>\r\n          <InfoDisplay\r\n            title=\"Humidity\"\r\n            value={selectedData.humidity.toFixed(2)}\r\n            size={4}\r\n          ></InfoDisplay>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default FullWeatherCard;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Moment from \"moment\";\r\n\r\nconst useStyles = makeStyles({\r\n  icon: {\r\n    height: 100,\r\n    margin: 20\r\n  }\r\n});\r\n\r\nfunction WeatherCard(props) {\r\n  const classes = useStyles();\r\n\r\n  function setSelectedData() {\r\n    props.setSelectedData(props.data);\r\n  }\r\n  const imageLink =\r\n    \"https://www.metaweather.com/static/img/weather/png/\" +\r\n    props.data.weather_state_abbr +\r\n    \".png\";\r\n  return (\r\n    <Grid item xs={2}>\r\n      <Card className=\"root\" style={{ cursor: \"pointer\" }}>\r\n        <CardContent onClick={setSelectedData}>\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            {Moment(props.data.applicable_date).format(\"DD MMMM\")}\r\n          </Typography>\r\n          <img\r\n            className={classes.icon}\r\n            src={imageLink}\r\n            alt={props.data.weather_state_name}\r\n          />\r\n          <Typography variant=\"h5\" component=\"h3\">\r\n            {props.data.the_temp.toFixed(2)} ºC\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React, { useState } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FullWeatherCard from \"./FullWeatherCard.js\";\r\nimport WeatherCard from \"./WeatherCard.js\";\r\nimport data from \"./data/example_data_location_request.json\";\r\n\r\nfunction WeatherDisplay(props) {\r\n  const [selectedData, setSelectedData] = useState(\r\n    data.consolidated_weather[0]\r\n  );\r\n\r\n  const weatherdata = data.consolidated_weather.slice(0, 5).map(data => {\r\n    return (\r\n      <WeatherCard\r\n        key={data.id}\r\n        data={data}\r\n        setSelectedData={setSelectedData}\r\n      ></WeatherCard>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Grid item xs={8}>\r\n      <Grid container spacing={3}>\r\n        {/* cards 5 days */}\r\n        <Grid item xs={12}>\r\n          <Grid container justify=\"space-between\">\r\n            {weatherdata}\r\n          </Grid>\r\n        </Grid>\r\n        {/* info 1 day */}\r\n        <Grid item xs={12}>\r\n          <FullWeatherCard selectedData={selectedData}></FullWeatherCard>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default WeatherDisplay;\r\n","import \"./App.css\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport React, { useState } from \"react\";\r\nimport SearchBar from \"./SearchBar.js\";\r\n//import data from \"./data/example_data_location_request.json\";\r\nimport WeatherDisplay from \"./WeatherDisplay.js\";\r\n\r\nfunction App() {\r\n  const [location, setLocation] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <SearchBar onChange={setLocation}></SearchBar>\r\n        <Grid container spacing={3}>\r\n          {/* map */}\r\n          <Grid item xs={4}>\r\n            <Paper>xs=4</Paper>\r\n          </Grid>\r\n          {/* weather info */}\r\n          <WeatherDisplay></WeatherDisplay>\r\n        </Grid>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n//import reportWebVitals from './reportWebVitals';\r\nimport { QueryClient, QueryClientProvider } from 'react-query';\r\n\r\nconst queryClient = new QueryClient();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <QueryClientProvider client={queryClient}>\r\n      <App />\r\n    </QueryClientProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}