{"version":3,"sources":["SearchBar.js","Map.js","SmallCard.js","SmallCards.js","BigCard.js","App.js","index.js"],"names":["SearchBar","updateLocation","useState","options","setOptions","Autocomplete","style","height","fullWidth","getOptionLabel","option","title","renderInput","params","TextField","label","variant","onChange","event","value","newInput","target","fetch","then","res","json","data","MapAux","ReactMapboxGl","accessToken","Map","latt_long","latitude","parseFloat","split","longitude","center","containerStyle","width","SmallCard","setSelectedDayWeatherData","imageLink","weather_state_abbr","Card","onClick","display","flexDirection","justifyContent","cursor","alignItems","Typography","component","margin","Moment","applicable_date","format","src","alt","weather_state_name","the_temp","toFixed","SmallCards","fiveDayWeatherData","gridTemplateColumns","columnGap","slice","map","id","BigCard","selectedDayWeatherData","align","max_temp","min_temp","App","locationInfo","setLocationInfo","setFiveDayWeatherData","gridTemplateRows","rowGap","div","gridColumnStart","gridColumnEnd","woeid","consolidated_weather","gridRowStart","gridRowEnd","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23ba8f9c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst SearchBar = ({ updateLocation }) => {\r\n  const [options, setOptions] = useState();\r\n\r\n  const updateOptions = (newInput) => {\r\n    //fetch(`http://localhost:8010/proxy/api/location/search/?query=${newInput}`)\r\n    fetch(`http://www.metaweather.com/api/location/search/?query=${newInput}`)\r\n      .then(res => res.json())\r\n      .then(data => setOptions(data))\r\n  }\r\n\r\n  return (\r\n    <Autocomplete\r\n      style={{ height: '100%' }}\r\n      fullWidth\r\n      options={options ? options : []}\r\n      getOptionLabel={option => option.title}\r\n      renderInput={params => (\r\n        <TextField\r\n          {...params}\r\n          label=\"Select a Location\"\r\n          variant=\"outlined\"\r\n          onChange={(event, value) => updateOptions(event.target.value)}\r\n        />\r\n      )}\r\n      onChange={(event, value) => updateLocation(value)}\r\n    />\r\n  );\r\n}\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport ReactMapboxGl from 'react-mapbox-gl';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\nconst MapAux = ReactMapboxGl({\r\n    accessToken: 'pk.eyJ1IjoicHNpbHZhaWMiLCJhIjoiY2tobmI5YTRlMDAzbTMxcGV6NDk3ZHNrdCJ9.mpgz1tj9j8cLrhrsZ5hlhw'\r\n});\r\n\r\nconst Map = ({ latt_long }) => {\r\n    const latitude = parseFloat(latt_long.split(\",\")[0]);\r\n    const longitude = parseFloat(latt_long.split(\",\")[1]);\r\n\r\n    return (\r\n        <MapAux\r\n            center={[longitude, latitude]}\r\n            style=\"mapbox://styles/mapbox/streets-v9\"\r\n            containerStyle={{ height: '100%', width: '100%' }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default Map;","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Moment from \"moment\";\r\n\r\nconst SmallCard = ({ data, setSelectedDayWeatherData }) => {\r\n\r\n    const imageLink =\r\n        \"https://www.metaweather.com/static/img/weather/png/\" +\r\n        data.weather_state_abbr +\r\n        \".png\";\r\n\r\n    return (\r\n        <Card\r\n            onClick={() => setSelectedDayWeatherData(data)}\r\n            style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'space-between',\r\n                cursor: \"pointer\",\r\n                alignItems: 'center'\r\n            }}>\r\n            <Typography variant=\"h5\" component=\"h2\" style={{ margin: '1rem' }}>\r\n                {Moment(data.applicable_date).format(\"D MMM\")}\r\n            </Typography>\r\n            <img width=\"50%\" height=\"auto\" src={imageLink} alt={data.weather_state_name} />\r\n            <Typography variant=\"h5\" component=\"h3\" style={{ margin: '1rem' }}>\r\n                {data.the_temp.toFixed(2)} ºC\r\n                </Typography>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default SmallCard;","import React from \"react\";\r\nimport SmallCard from \"./SmallCard\";\r\n\r\nconst SmallCards = ({ fiveDayWeatherData, setSelectedDayWeatherData }) => {\r\n    return (\r\n        <div style={{\r\n            display: 'grid',\r\n            gridTemplateColumns: 'repeat(5, auto)',\r\n            columnGap: '1rem',\r\n            height: '100%'\r\n        }}>\r\n            {\r\n                fiveDayWeatherData.slice(0, 5).map(data => {\r\n                    return (<SmallCard\r\n                        key={data.id}\r\n                        data={data}\r\n                        setSelectedDayWeatherData={setSelectedDayWeatherData} />);\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SmallCards;\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Moment from \"moment\";\r\n\r\nconst BigCard = ({ selectedDayWeatherData }) => {\r\n\r\n    const imageLink =\r\n        \"https://www.metaweather.com/static/img/weather/png/\" +\r\n        selectedDayWeatherData.weather_state_abbr +\r\n        \".png\";\r\n\r\n    return (\r\n        <Card style={{ height: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'space-evenly' }}>\r\n            <Typography variant=\"h3\" component=\"h3\" align=\"center\">\r\n                {Moment(selectedDayWeatherData.applicable_date).format(\"D MMMM YYYY\")}\r\n            </Typography>\r\n            <div style={{ display: 'flex', justifyContent: 'space-evenly', alignItems: 'center' }}>\r\n                <Typography variant=\"h2\" component=\"h3\" align=\"right\">\r\n                    {selectedDayWeatherData.the_temp.toFixed(2)} ºC\r\n                </Typography>\r\n                <Typography variant=\"h5\" component=\"p\">\r\n                    Max: {selectedDayWeatherData.max_temp.toFixed(2)} ºC<br />\r\n                    Min: {selectedDayWeatherData.min_temp.toFixed(2)} ºC\r\n                </Typography>\r\n                <img\r\n                    width=\"20%\" height=\"auto\"\r\n                    src={imageLink}\r\n                    alt={selectedDayWeatherData.weather_state_name}\r\n                />\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default BigCard;\r\n\r\n{/*\r\n<Grid container>\r\n                    <Grid item xs={12}>\r\n                        <Typography\r\n                            variant=\"h3\"\r\n                            component=\"h3\"\r\n                            align=\"center\"\r\n                            className={classes.title}\r\n                        >\r\n                            {Moment(selectedDayWeatherData.applicable_date).format(\"D MMMM YYYY\")}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        item\r\n                        justify=\"flex-end\"\r\n                        alignItems=\"center\"\r\n                        className={classes.temp}\r\n                        xs={4}\r\n                    >\r\n                        <Typography variant=\"h2\" component=\"h3\" align=\"right\">\r\n                            {selectedDayWeatherData.the_temp.toFixed(2)} ºC\r\n            </Typography>\r\n                    </Grid>\r\n                    <Grid\r\n                        xs={3}\r\n                        item\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"flex-start\"\r\n                    >\r\n                        <Typography variant=\"h5\" component=\"p\">\r\n                            Max: {selectedDayWeatherData.max_temp.toFixed(2)} ºC\r\n            </Typography>\r\n                        <Typography variant=\"h5\" component=\"p\">\r\n                            Min: {selectedDayWeatherData.min_temp.toFixed(2)} ºC\r\n            </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <img\r\n                            className={classes.icon}\r\n                            src={imageLink}\r\n                            alt={selectedDayWeatherData.weather_state_name}\r\n                        />\r\n                    </Grid>\r\n                    <InfoDisplay\r\n                        title=\"Wind speed\"\r\n                        value={selectedDayWeatherData.wind_speed.toFixed(2)}\r\n                        size={4}\r\n                    ></InfoDisplay>\r\n                    <InfoDisplay\r\n                        title=\"Wind direction\"\r\n                        value={selectedDayWeatherData.wind_direction.toFixed(2)}\r\n                        size={4}\r\n                    ></InfoDisplay>\r\n                    <InfoDisplay\r\n                        title=\"Wind direction compass\"\r\n                        value={selectedDayWeatherData.wind_direction_compass}\r\n                        size={4}\r\n                    ></InfoDisplay>\r\n                    <InfoDisplay\r\n                        title=\"Air pressure\"\r\n                        value={selectedDayWeatherData.air_pressure.toFixed(2)}\r\n                        size={4}\r\n                    ></InfoDisplay>\r\n                    <InfoDisplay\r\n                        title=\"Humidity\"\r\n                        value={selectedDayWeatherData.humidity.toFixed(2)}\r\n                        size={4}\r\n                    ></InfoDisplay>\r\n                </Grid>\r\n*/}","import React, { useState } from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport Map from \"./Map\";\r\nimport SmallCards from \"./SmallCards\";\r\nimport BigCard from \"./BigCard\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [locationInfo, setLocationInfo] = useState();\r\n  const [fiveDayWeatherData, setFiveDayWeatherData] = useState();\r\n  const [selectedDayWeatherData, setSelectedDayWeatherData] = useState();\r\n\r\n  const updateLocation = (locationInfo) => {\r\n    setLocationInfo(locationInfo);\r\n    if (locationInfo && locationInfo.woeid) {\r\n      let woeid = locationInfo.woeid;\r\n      //fetch(`http://localhost:8010/proxy/api/location/${woeid}`)\r\n      fetch(`www.metaweather.com/api/location/${woeid}`)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          setFiveDayWeatherData(data.consolidated_weather);\r\n          setSelectedDayWeatherData(data.consolidated_weather[0]);\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{\r\n      display: 'grid',\r\n      gridTemplateColumns: '1fr 2fr',\r\n      columnGap: '1rem',\r\n      gridTemplateRows: 'auto auto 1fr',\r\n      rowGap: '1rem',\r\n      height: '100vh',\r\n    }}>\r\n      <div div style={{\r\n        gridColumnStart: 1,\r\n        gridColumnEnd: 3,\r\n        margin: '1rem 1rem 0 1rem'\r\n      }}>\r\n        <SearchBar updateLocation={updateLocation} />\r\n      </div >\r\n      <div style={{\r\n        gridRowStart: '2',\r\n        gridRowEnd: '4',\r\n        margin: '0 0 1rem 1rem'\r\n      }}>\r\n        {locationInfo &&\r\n          <Map latt_long={locationInfo.latt_long} />\r\n        }\r\n      </div>\r\n      <div style={{\r\n        gridRowStart: '2',\r\n        gridColumnStart: '2',\r\n        margin: '0 1rem 0 0'\r\n      }}\r\n      >\r\n        {fiveDayWeatherData &&\r\n          <SmallCards fiveDayWeatherData={fiveDayWeatherData} setSelectedDayWeatherData={setSelectedDayWeatherData} />\r\n        }\r\n      </div>\r\n      <div style={{\r\n        gridRowStart: '3',\r\n        gridColumnStart: '2',\r\n        margin: '0 1rem 1rem 0',\r\n      }}>\r\n        {selectedDayWeatherData &&\r\n          <BigCard selectedDayWeatherData={selectedDayWeatherData} />\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n//import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode >,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}